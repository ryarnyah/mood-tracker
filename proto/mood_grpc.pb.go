// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mood

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoodClient is the client API for Mood service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoodClient interface {
	AddEntry(ctx context.Context, in *AddEntryRequest, opts ...grpc.CallOption) (*AddEntryResponse, error)
	GetMoodFromEntry(ctx context.Context, in *GetMoodFromEntryRequest, opts ...grpc.CallOption) (*GetMoodFromEntryResponse, error)
	GetMood(ctx context.Context, in *GetMoodRequest, opts ...grpc.CallOption) (*GetMoodResponse, error)
	CreateMood(ctx context.Context, in *CreateMoodRequest, opts ...grpc.CallOption) (*CreateMoodResponse, error)
}

type moodClient struct {
	cc grpc.ClientConnInterface
}

func NewMoodClient(cc grpc.ClientConnInterface) MoodClient {
	return &moodClient{cc}
}

func (c *moodClient) AddEntry(ctx context.Context, in *AddEntryRequest, opts ...grpc.CallOption) (*AddEntryResponse, error) {
	out := new(AddEntryResponse)
	err := c.cc.Invoke(ctx, "/Mood/AddEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moodClient) GetMoodFromEntry(ctx context.Context, in *GetMoodFromEntryRequest, opts ...grpc.CallOption) (*GetMoodFromEntryResponse, error) {
	out := new(GetMoodFromEntryResponse)
	err := c.cc.Invoke(ctx, "/Mood/GetMoodFromEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moodClient) GetMood(ctx context.Context, in *GetMoodRequest, opts ...grpc.CallOption) (*GetMoodResponse, error) {
	out := new(GetMoodResponse)
	err := c.cc.Invoke(ctx, "/Mood/GetMood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moodClient) CreateMood(ctx context.Context, in *CreateMoodRequest, opts ...grpc.CallOption) (*CreateMoodResponse, error) {
	out := new(CreateMoodResponse)
	err := c.cc.Invoke(ctx, "/Mood/CreateMood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoodServer is the server API for Mood service.
// All implementations must embed UnimplementedMoodServer
// for forward compatibility
type MoodServer interface {
	AddEntry(context.Context, *AddEntryRequest) (*AddEntryResponse, error)
	GetMoodFromEntry(context.Context, *GetMoodFromEntryRequest) (*GetMoodFromEntryResponse, error)
	GetMood(context.Context, *GetMoodRequest) (*GetMoodResponse, error)
	CreateMood(context.Context, *CreateMoodRequest) (*CreateMoodResponse, error)
	mustEmbedUnimplementedMoodServer()
}

// UnimplementedMoodServer must be embedded to have forward compatible implementations.
type UnimplementedMoodServer struct {
}

func (UnimplementedMoodServer) AddEntry(context.Context, *AddEntryRequest) (*AddEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntry not implemented")
}
func (UnimplementedMoodServer) GetMoodFromEntry(context.Context, *GetMoodFromEntryRequest) (*GetMoodFromEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoodFromEntry not implemented")
}
func (UnimplementedMoodServer) GetMood(context.Context, *GetMoodRequest) (*GetMoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMood not implemented")
}
func (UnimplementedMoodServer) CreateMood(context.Context, *CreateMoodRequest) (*CreateMoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMood not implemented")
}
func (UnimplementedMoodServer) mustEmbedUnimplementedMoodServer() {}

// UnsafeMoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoodServer will
// result in compilation errors.
type UnsafeMoodServer interface {
	mustEmbedUnimplementedMoodServer()
}

func RegisterMoodServer(s grpc.ServiceRegistrar, srv MoodServer) {
	s.RegisterService(&Mood_ServiceDesc, srv)
}

func _Mood_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/AddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).AddEntry(ctx, req.(*AddEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mood_GetMoodFromEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoodFromEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).GetMoodFromEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/GetMoodFromEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).GetMoodFromEntry(ctx, req.(*GetMoodFromEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mood_GetMood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).GetMood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/GetMood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).GetMood(ctx, req.(*GetMoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mood_CreateMood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).CreateMood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/CreateMood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).CreateMood(ctx, req.(*CreateMoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mood_ServiceDesc is the grpc.ServiceDesc for Mood service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mood_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mood",
	HandlerType: (*MoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEntry",
			Handler:    _Mood_AddEntry_Handler,
		},
		{
			MethodName: "GetMoodFromEntry",
			Handler:    _Mood_GetMoodFromEntry_Handler,
		},
		{
			MethodName: "GetMood",
			Handler:    _Mood_GetMood_Handler,
		},
		{
			MethodName: "CreateMood",
			Handler:    _Mood_CreateMood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mood.proto",
}
