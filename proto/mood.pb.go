// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: mood.proto

package mood

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record  uint32 `protobuf:"varint,1,opt,name=record,proto3" json:"record,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{0}
}

func (x *Entry) GetRecord() uint32 {
	if x != nil {
		return x.Record
	}
	return 0
}

func (x *Entry) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type AddEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry           *Entry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	MoodId          int64  `protobuf:"varint,2,opt,name=mood_id,json=moodId,proto3" json:"mood_id,omitempty"`
	EntryAccessCode string `protobuf:"bytes,3,opt,name=entry_access_code,json=entryAccessCode,proto3" json:"entry_access_code,omitempty"`
}

func (x *AddEntryRequest) Reset() {
	*x = AddEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEntryRequest) ProtoMessage() {}

func (x *AddEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEntryRequest.ProtoReflect.Descriptor instead.
func (*AddEntryRequest) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{1}
}

func (x *AddEntryRequest) GetEntry() *Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *AddEntryRequest) GetMoodId() int64 {
	if x != nil {
		return x.MoodId
	}
	return 0
}

func (x *AddEntryRequest) GetEntryAccessCode() string {
	if x != nil {
		return x.EntryAccessCode
	}
	return ""
}

type AddEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEntryResponse) Reset() {
	*x = AddEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEntryResponse) ProtoMessage() {}

func (x *AddEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEntryResponse.ProtoReflect.Descriptor instead.
func (*AddEntryResponse) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{2}
}

type GetMoodFromEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodId          int64  `protobuf:"varint,2,opt,name=mood_id,json=moodId,proto3" json:"mood_id,omitempty"`
	EntryAccessCode string `protobuf:"bytes,3,opt,name=entry_access_code,json=entryAccessCode,proto3" json:"entry_access_code,omitempty"`
}

func (x *GetMoodFromEntryRequest) Reset() {
	*x = GetMoodFromEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoodFromEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoodFromEntryRequest) ProtoMessage() {}

func (x *GetMoodFromEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoodFromEntryRequest.ProtoReflect.Descriptor instead.
func (*GetMoodFromEntryRequest) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{3}
}

func (x *GetMoodFromEntryRequest) GetMoodId() int64 {
	if x != nil {
		return x.MoodId
	}
	return 0
}

func (x *GetMoodFromEntryRequest) GetEntryAccessCode() string {
	if x != nil {
		return x.EntryAccessCode
	}
	return ""
}

type GetMoodFromEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GetMoodFromEntryResponse) Reset() {
	*x = GetMoodFromEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoodFromEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoodFromEntryResponse) ProtoMessage() {}

func (x *GetMoodFromEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoodFromEntryResponse.ProtoReflect.Descriptor instead.
func (*GetMoodFromEntryResponse) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{4}
}

func (x *GetMoodFromEntryResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetMoodFromEntryResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GetMoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodId         int64  `protobuf:"varint,1,opt,name=mood_id,json=moodId,proto3" json:"mood_id,omitempty"`
	MoodAccessCode string `protobuf:"bytes,2,opt,name=mood_access_code,json=moodAccessCode,proto3" json:"mood_access_code,omitempty"`
}

func (x *GetMoodRequest) Reset() {
	*x = GetMoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoodRequest) ProtoMessage() {}

func (x *GetMoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoodRequest.ProtoReflect.Descriptor instead.
func (*GetMoodRequest) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{5}
}

func (x *GetMoodRequest) GetMoodId() int64 {
	if x != nil {
		return x.MoodId
	}
	return 0
}

func (x *GetMoodRequest) GetMoodAccessCode() string {
	if x != nil {
		return x.MoodAccessCode
	}
	return ""
}

type GetMoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string           `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Entries []*Entry         `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	Stats   map[uint32]int64 `protobuf:"bytes,4,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetMoodResponse) Reset() {
	*x = GetMoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoodResponse) ProtoMessage() {}

func (x *GetMoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoodResponse.ProtoReflect.Descriptor instead.
func (*GetMoodResponse) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{6}
}

func (x *GetMoodResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetMoodResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetMoodResponse) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *GetMoodResponse) GetStats() map[uint32]int64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CreateMoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                 string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content               string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	NumberOfRecordsNeeded uint32 `protobuf:"varint,3,opt,name=number_of_records_needed,json=numberOfRecordsNeeded,proto3" json:"number_of_records_needed,omitempty"`
}

func (x *CreateMoodRequest) Reset() {
	*x = CreateMoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMoodRequest) ProtoMessage() {}

func (x *CreateMoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMoodRequest.ProtoReflect.Descriptor instead.
func (*CreateMoodRequest) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{7}
}

func (x *CreateMoodRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateMoodRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateMoodRequest) GetNumberOfRecordsNeeded() uint32 {
	if x != nil {
		return x.NumberOfRecordsNeeded
	}
	return 0
}

type CreateMoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoodId             int64    `protobuf:"varint,1,opt,name=mood_id,json=moodId,proto3" json:"mood_id,omitempty"`
	MoodAccessCode     string   `protobuf:"bytes,2,opt,name=mood_access_code,json=moodAccessCode,proto3" json:"mood_access_code,omitempty"`
	EntriesAccessCodes []string `protobuf:"bytes,3,rep,name=entries_access_codes,json=entriesAccessCodes,proto3" json:"entries_access_codes,omitempty"`
}

func (x *CreateMoodResponse) Reset() {
	*x = CreateMoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mood_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMoodResponse) ProtoMessage() {}

func (x *CreateMoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mood_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMoodResponse.ProtoReflect.Descriptor instead.
func (*CreateMoodResponse) Descriptor() ([]byte, []int) {
	return file_mood_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMoodResponse) GetMoodId() int64 {
	if x != nil {
		return x.MoodId
	}
	return 0
}

func (x *CreateMoodResponse) GetMoodAccessCode() string {
	if x != nil {
		return x.MoodAccessCode
	}
	return ""
}

func (x *CreateMoodResponse) GetEntriesAccessCodes() []string {
	if x != nil {
		return x.EntriesAccessCodes
	}
	return nil
}

var File_mood_proto protoreflect.FileDescriptor

var file_mood_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xe2,
	0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x04, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x07,
	0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x11, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01,
	0x90, 0x01, 0x04, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x6d, 0x6f,
	0x6f, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5e, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x78, 0x81,
	0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78,
	0x81, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x07, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x10, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01,
	0x90, 0x01, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x6f, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x78, 0x81,
	0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78,
	0x81, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x78, 0x81, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0x81, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x15,
	0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x07, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x6f, 0x64, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x10, 0x6d, 0x6f, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58,
	0x01, 0x90, 0x01, 0x04, 0x52, 0x0e, 0x6d, 0x6f, 0x6f, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x32, 0xed, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x6f, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x2e, 0x41, 0x64,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x12, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x6d, 0x6f, 0x6f, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mood_proto_rawDescOnce sync.Once
	file_mood_proto_rawDescData = file_mood_proto_rawDesc
)

func file_mood_proto_rawDescGZIP() []byte {
	file_mood_proto_rawDescOnce.Do(func() {
		file_mood_proto_rawDescData = protoimpl.X.CompressGZIP(file_mood_proto_rawDescData)
	})
	return file_mood_proto_rawDescData
}

var file_mood_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mood_proto_goTypes = []interface{}{
	(*Entry)(nil),                    // 0: Entry
	(*AddEntryRequest)(nil),          // 1: AddEntryRequest
	(*AddEntryResponse)(nil),         // 2: AddEntryResponse
	(*GetMoodFromEntryRequest)(nil),  // 3: GetMoodFromEntryRequest
	(*GetMoodFromEntryResponse)(nil), // 4: GetMoodFromEntryResponse
	(*GetMoodRequest)(nil),           // 5: GetMoodRequest
	(*GetMoodResponse)(nil),          // 6: GetMoodResponse
	(*CreateMoodRequest)(nil),        // 7: CreateMoodRequest
	(*CreateMoodResponse)(nil),       // 8: CreateMoodResponse
	nil,                              // 9: GetMoodResponse.StatsEntry
}
var file_mood_proto_depIdxs = []int32{
	0, // 0: AddEntryRequest.entry:type_name -> Entry
	0, // 1: GetMoodResponse.entries:type_name -> Entry
	9, // 2: GetMoodResponse.stats:type_name -> GetMoodResponse.StatsEntry
	1, // 3: Mood.AddEntry:input_type -> AddEntryRequest
	3, // 4: Mood.GetMoodFromEntry:input_type -> GetMoodFromEntryRequest
	5, // 5: Mood.GetMood:input_type -> GetMoodRequest
	7, // 6: Mood.CreateMood:input_type -> CreateMoodRequest
	2, // 7: Mood.AddEntry:output_type -> AddEntryResponse
	4, // 8: Mood.GetMoodFromEntry:output_type -> GetMoodFromEntryResponse
	6, // 9: Mood.GetMood:output_type -> GetMoodResponse
	8, // 10: Mood.CreateMood:output_type -> CreateMoodResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_mood_proto_init() }
func file_mood_proto_init() {
	if File_mood_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mood_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoodFromEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoodFromEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mood_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mood_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mood_proto_goTypes,
		DependencyIndexes: file_mood_proto_depIdxs,
		MessageInfos:      file_mood_proto_msgTypes,
	}.Build()
	File_mood_proto = out.File
	file_mood_proto_rawDesc = nil
	file_mood_proto_goTypes = nil
	file_mood_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MoodClient is the client API for Mood service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoodClient interface {
	AddEntry(ctx context.Context, in *AddEntryRequest, opts ...grpc.CallOption) (*AddEntryResponse, error)
	GetMoodFromEntry(ctx context.Context, in *GetMoodFromEntryRequest, opts ...grpc.CallOption) (*GetMoodFromEntryResponse, error)
	GetMood(ctx context.Context, in *GetMoodRequest, opts ...grpc.CallOption) (*GetMoodResponse, error)
	CreateMood(ctx context.Context, in *CreateMoodRequest, opts ...grpc.CallOption) (*CreateMoodResponse, error)
}

type moodClient struct {
	cc grpc.ClientConnInterface
}

func NewMoodClient(cc grpc.ClientConnInterface) MoodClient {
	return &moodClient{cc}
}

func (c *moodClient) AddEntry(ctx context.Context, in *AddEntryRequest, opts ...grpc.CallOption) (*AddEntryResponse, error) {
	out := new(AddEntryResponse)
	err := c.cc.Invoke(ctx, "/Mood/AddEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moodClient) GetMoodFromEntry(ctx context.Context, in *GetMoodFromEntryRequest, opts ...grpc.CallOption) (*GetMoodFromEntryResponse, error) {
	out := new(GetMoodFromEntryResponse)
	err := c.cc.Invoke(ctx, "/Mood/GetMoodFromEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moodClient) GetMood(ctx context.Context, in *GetMoodRequest, opts ...grpc.CallOption) (*GetMoodResponse, error) {
	out := new(GetMoodResponse)
	err := c.cc.Invoke(ctx, "/Mood/GetMood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moodClient) CreateMood(ctx context.Context, in *CreateMoodRequest, opts ...grpc.CallOption) (*CreateMoodResponse, error) {
	out := new(CreateMoodResponse)
	err := c.cc.Invoke(ctx, "/Mood/CreateMood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoodServer is the server API for Mood service.
type MoodServer interface {
	AddEntry(context.Context, *AddEntryRequest) (*AddEntryResponse, error)
	GetMoodFromEntry(context.Context, *GetMoodFromEntryRequest) (*GetMoodFromEntryResponse, error)
	GetMood(context.Context, *GetMoodRequest) (*GetMoodResponse, error)
	CreateMood(context.Context, *CreateMoodRequest) (*CreateMoodResponse, error)
}

// UnimplementedMoodServer can be embedded to have forward compatible implementations.
type UnimplementedMoodServer struct {
}

func (*UnimplementedMoodServer) AddEntry(context.Context, *AddEntryRequest) (*AddEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntry not implemented")
}
func (*UnimplementedMoodServer) GetMoodFromEntry(context.Context, *GetMoodFromEntryRequest) (*GetMoodFromEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoodFromEntry not implemented")
}
func (*UnimplementedMoodServer) GetMood(context.Context, *GetMoodRequest) (*GetMoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMood not implemented")
}
func (*UnimplementedMoodServer) CreateMood(context.Context, *CreateMoodRequest) (*CreateMoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMood not implemented")
}

func RegisterMoodServer(s *grpc.Server, srv MoodServer) {
	s.RegisterService(&_Mood_serviceDesc, srv)
}

func _Mood_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/AddEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).AddEntry(ctx, req.(*AddEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mood_GetMoodFromEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoodFromEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).GetMoodFromEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/GetMoodFromEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).GetMoodFromEntry(ctx, req.(*GetMoodFromEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mood_GetMood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).GetMood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/GetMood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).GetMood(ctx, req.(*GetMoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mood_CreateMood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoodServer).CreateMood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mood/CreateMood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoodServer).CreateMood(ctx, req.(*CreateMoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mood_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mood",
	HandlerType: (*MoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEntry",
			Handler:    _Mood_AddEntry_Handler,
		},
		{
			MethodName: "GetMoodFromEntry",
			Handler:    _Mood_GetMoodFromEntry_Handler,
		},
		{
			MethodName: "GetMood",
			Handler:    _Mood_GetMood_Handler,
		},
		{
			MethodName: "CreateMood",
			Handler:    _Mood_CreateMood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mood.proto",
}
