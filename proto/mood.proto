syntax = "proto3";
option go_package = ".;mood";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/timestamp.proto";

message Entry {
  uint32 record = 1 [(validator.field) = {int_gt: 0, int_lt: 4}];
  string comment = 2 [(validator.field) = {length_lt: 129}];
}

message EntryWithDate {
  uint32 record = 1 [(validator.field) = {int_gt: 0, int_lt: 4}];
  string comment = 2 [(validator.field) = {length_lt: 129}];
  google.protobuf.Timestamp record_entry = 3;
}

message AddEntryRequest {
  Entry entry = 1 [(validator.field) = {msg_exists : true}];

  string mood_id = 2 [(validator.field) = {string_not_empty: true, length_eq: 27}];
  string entry_id = 3 [(validator.field) = {string_not_empty: true, length_eq: 27}];

  string entry_signature = 4 [(validator.field) = {string_not_empty: true, length_lt: 512}];
}

message AddEntryResponse {}

message GetMoodFromEntryRequest {
  string mood_id = 1 [(validator.field) = {string_not_empty: true, length_eq: 27}];
  string entry_id = 2 [(validator.field) = {string_not_empty: true, length_eq: 27}];

  string entry_signature = 3 [(validator.field) = {string_not_empty: true, length_lt: 512}];
}

message GetMoodFromEntryResponse {
  string title = 1 [(validator.field) = {string_not_empty: true, length_lt: 129}];
  string content = 2 [(validator.field) = {length_lt: 513}];
}

message GetMoodRequest {
  string mood_id = 1 [(validator.field) = {string_not_empty: true, length_eq: 27}];
  string mood_signature = 2 [(validator.field) = {string_not_empty: true, length_lt: 512}];
}

message RecordStat {
  google.protobuf.Timestamp record_entry = 1;
  int64 count = 2;
}

message MoodStat {
  uint32 record = 1;
  repeated RecordStat record_stats = 2;
}

message GetMoodResponse {
  string title = 1 [(validator.field) = {string_not_empty: true, length_lt: 129}];
  string content = 2 [(validator.field) = {length_lt: 513}];
  repeated EntryWithDate entries = 3;
  repeated MoodStat stats = 4;
}

message CreateMoodRequest {
  string title = 1 [(validator.field) = {string_not_empty: true, length_lt: 129}];
  string content = 2 [(validator.field) = {length_lt: 513}];
  uint32 number_of_records_needed = 3 [(validator.field) = {int_lt: 21}];
  repeated string emails = 4 [(validator.field) = {string_not_empty: true, repeated_count_max: 20, regex: "^[a-zA-Z0-9.!#$%%&'*+/=?^_{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"}];
}

message EntrySigned {
  string entry_id = 1 [(validator.field) = {string_not_empty: true, length_eq: 27}];
  string entry_signature = 2 [(validator.field) = {string_not_empty: true, length_lt: 512}];
}

message CreateMoodResponse {
  string mood_id = 1 [(validator.field) = {string_not_empty: true, length_eq: 27}];
  string mood_signature = 2 [(validator.field) = {string_not_empty: true, length_lt: 512}];

  repeated EntrySigned entries_ids = 3;
}

service Mood {
  rpc AddEntry(AddEntryRequest) returns (AddEntryResponse) {}
  rpc GetMoodFromEntry(GetMoodFromEntryRequest) returns (GetMoodFromEntryResponse) {}
  rpc GetMood(GetMoodRequest) returns (GetMoodResponse) {}
  rpc CreateMood(CreateMoodRequest) returns (CreateMoodResponse) {}
}
